{"BOPTEST CASE INFORMATION": {"Test case name": "{'name': 'testcase1'}", "All measurement variables": "{'CO2RooAir_y': {'Description': 'Zone air CO2 concentration',\n                 'Maximum': None,\n                 'Minimum': None,\n                 'Unit': 'ppm'},\n 'PHea_y': {'Description': 'Heater power',\n            'Maximum': None,\n            'Minimum': None,\n            'Unit': 'W'},\n 'TRooAir_y': {'Description': 'Zone air temperature',\n               'Maximum': None,\n               'Minimum': None,\n               'Unit': 'K'}}", "All forecasting variables": "['EmissionsBiomassPower',\n 'EmissionsDistrictHeatingPower',\n 'EmissionsElectricPower',\n 'EmissionsGasPower',\n 'EmissionsSolarThermalPower',\n 'InternalGainsCon[1]',\n 'InternalGainsLat[1]',\n 'InternalGainsRad[1]',\n 'LowerSetp[1]',\n 'Occupancy[1]',\n 'PriceBiomassPower',\n 'PriceDistrictHeatingPower',\n 'PriceElectricPowerConstant',\n 'PriceElectricPowerDynamic',\n 'PriceElectricPowerHighlyDynamic',\n 'PriceGasPower',\n 'PriceSolarThermalPower',\n 'TDryBul',\n 'UpperCO2[1]',\n 'UpperSetp[1]']", "All input variables": "{'oveAct_activate': {'Description': 'Activation for Heater thermal power',\n                     'Maximum': None,\n                     'Minimum': None,\n                     'Unit': None},\n 'oveAct_u': {'Description': 'Heater thermal power',\n              'Maximum': 10000.0,\n              'Minimum': -10000.0,\n              'Unit': 'W'}}", "Default simulation step (seconds)": "3600.0", "Default forecasting parameters (seconds)": "{'horizon': 10, 'interval': 900}", "Default scenario": "{'electricity_price': 'constant'}", "Test case scenario": "{'electricity_price': 'constant'}"}, "GYM ENVIRONMENT INFORMATION": {"Observation space": "Box([200.], [400.], (1,), float32)", "Action space": "Box([-10000.], [10000.], (1,), float32)", "Is a regressive environment": "False", "Is a predictive environment": "False", "Regressive period (seconds)": "None", "Predictive period (seconds)": "None", "Measurement variables used in observation space": "['TRooAir_y']", "Predictive variables used in observation space": "[]", "Sampling time (seconds)": "3600", "Random start time": "True", "Excluding periods (seconds from the beginning of the year)": "None", "Warmup period for each episode (seconds)": "86400", "Maximum episode length (seconds)": "86400", "Environment reward function (source code)": "('    def compute_reward(self):\\n'\n \"        '''\\n\"\n \"        Compute the reward of last state-action-state' tuple. The \\n\"\n '        reward is implemented as the negated increase in the objective\\n'\n '        integrand function. In turn, this objective integrand function \\n'\n '        is calculated as the sum of the total operational cost plus\\n'\n '        the weighted discomfort. \\n'\n '        \\n'\n '        Returns\\n'\n '        -------\\n'\n '        Reward: float\\n'\n \"            Reward of last state-action-state' tuple\\n\"\n '        \\n'\n '        Notes\\n'\n '        -----\\n'\n '        This method is just a default method to compute reward. It can be \\n'\n '        overridden by defining a child from this class with\\n'\n '        this same method name, i.e. `compute_reward`. If a custom reward \\n'\n '        is defined, it is strongly recommended to derive it using the KPIs\\n'\n '        as returned from the BOPTEST framework, as it is done in this \\n'\n '        default `compute_reward` method. This ensures that all variables \\n'\n '        that may contribute to any KPI are properly accounted and \\n'\n '        integrated. \\n'\n '        \\n'\n \"        '''\\n\"\n '        \\n'\n '        # Define a relative weight for the discomfort \\n'\n '        w = 1\\n'\n '        \\n'\n '        # Compute BOPTEST core kpis\\n'\n \"        kpis = requests.get('{0}/kpi'.format(self.url)).json()['payload']\\n\"\n '        \\n'\n '        # Calculate objective integrand function at this point\\n'\n \"        objective_integrand = kpis['cost_tot'] + w*kpis['tdis_tot']\\n\"\n '        \\n'\n '        # Compute reward\\n'\n '        reward = -(objective_integrand - self.objective_integrand)\\n'\n '        \\n'\n '        self.objective_integrand = objective_integrand\\n'\n '        \\n'\n '        return reward\\n')", "Environment hierarchy": "(<class 'boptestGymEnv.BoptestGymEnv'>,\n <class 'gym.core.Env'>,\n <class 'object'>)"}}